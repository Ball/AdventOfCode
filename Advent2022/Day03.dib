#!markdown

# Day 03

see [F# Interactive](https://learn.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/) for details on loading external code

#!markdown

## Problem Input

#!fsharp

let input = System.IO.File.ReadAllText("Day03.txt")
let testInput = """vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw"""

#!markdown

# Part 01 - 

## Process Input

#!fsharp

// Expected Types
type Rucksack = char seq * char seq
let toRucksack (input: string) : Rucksack =
    let part1 = input.Length / 2
    let part2 = input.Length - part1
    ( input.Substring(0, part1)
    , input.Substring(part1, part2)
    )

toRucksack "vJrwpWtwJgWrhcsFMMfFFhFp"

#!markdown

## Operate on Input Values 

#!fsharp

// functions
let duplicatesIn ((pocket1:char seq, pocket2: char seq):Rucksack) : char seq =
    let distinct = pocket2 |> Seq.distinct
    pocket1
    |> Seq.distinct
    |> Seq.filter (fun c -> Seq.contains c distinct)

let score (c:char) : int =
    if Char.IsLower(c) then
        1+((int)c) - ((int)'a')
    else
        27+((int)c) - ((int)'A')

// process values
input.Split('\n')
|> Array.map (toRucksack >> duplicatesIn >> (Seq.map score) >> Seq.sum)
|> Array.sum

#!markdown

# Part 02 - 

#!fsharp

let shared input =
    input
    |> Array.map (fun s ->  Set.ofSeq s)
    |> Array.reduce (fun a b -> b |> Set.intersect a)

input.Split('\n')
|> Array.chunkBySize 3
|> Array.map (shared >> (Seq.map score) >> Seq.sum)
|> Array.sum
